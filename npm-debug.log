0 info it worked if it ends with ok
1 verbose cli [ '/usr/local/bin/node', '/usr/local/bin/npm', 'publish' ]
2 info using npm@2.14.7
3 info using node@v4.2.2
4 verbose publish [ '.' ]
5 silly cache add args [ '.', null ]
6 verbose cache add spec .
7 silly cache add parsed spec Result {
7 silly cache add   raw: '.',
7 silly cache add   scope: null,
7 silly cache add   name: null,
7 silly cache add   rawSpec: '.',
7 silly cache add   spec: '/Users/heitor/Projects/paymentwall-node',
7 silly cache add   type: 'directory' }
8 verbose addLocalDirectory /Users/heitor/.npm/paymentwall/1.1.0/package.tgz not in flight; packing
9 verbose tar pack [ '/Users/heitor/.npm/paymentwall/1.1.0/package.tgz',
9 verbose tar pack   '/Users/heitor/Projects/paymentwall-node' ]
10 verbose tarball /Users/heitor/.npm/paymentwall/1.1.0/package.tgz
11 verbose folder /Users/heitor/Projects/paymentwall-node
12 info prepublish paymentwall@1.1.0
13 verbose addLocalTarball adding from inside cache /Users/heitor/.npm/paymentwall/1.1.0/package.tgz
14 silly cache afterAdd paymentwall@1.1.0
15 verbose afterAdd /Users/heitor/.npm/paymentwall/1.1.0/package/package.json not in flight; writing
16 verbose afterAdd /Users/heitor/.npm/paymentwall/1.1.0/package/package.json written
17 silly publish { name: 'paymentwall',
17 silly publish   version: '1.1.0',
17 silly publish   author:
17 silly publish    { name: 'Paymentwall Team',
17 silly publish      email: 'devsupport@paymentwall.com' },
17 silly publish   description: 'Paymentwall Node.js Library',
17 silly publish   main: './index',
17 silly publish   repository:
17 silly publish    { type: 'git',
17 silly publish      url: 'git+https://github.com/paymentwall/paymentwall-node.git' },
17 silly publish   scripts: { test: 'cucumber.js' },
17 silly publish   bugs: { url: 'https://github.com/paymentwall/paymentwall-node/issues' },
17 silly publish   keywords:
17 silly publish    [ 'payments',
17 silly publish      'paymentwall',
17 silly publish      'digital goods',
17 silly publish      'credit card',
17 silly publish      'sms',
17 silly publish      'bank transfer',
17 silly publish      'prepaid',
17 silly publish      'ewallet',
17 silly publish      'monetization',
17 silly publish      'cucumber' ],
17 silly publish   devDependencies: { cucumber: '*', chai: '*', request: '*', cheerio: '*' },
17 silly publish   license: 'MIT',
17 silly publish   homepage: 'http://www.paymentwall.com',
17 silly publish   readme: '#About Paymentwall\n[Paymentwall](http://paymentwall.com/?source=gh-node) is the leading digital payments platform for globally monetizing digital goods and services. Paymentwall assists game publishers, dating sites, rewards sites, SaaS companies and many other verticals to monetize their digital content and services. \nMerchants can plugin Paymentwall\'s API to accept payments from over 100 different methods including credit cards, debit cards, bank transfers, SMS/Mobile payments, prepaid cards, eWallets, landline payments and others. \n\nTo sign up for a Paymentwall Merchant Account, [click here](http://paymentwall.com/signup/merchant?source=gh-node).\n\n#Paymentwall Node.js Library\nThis library allows developers to use [Paymentwall APIs](http://paymentwall.com/en/documentation/API-Documentation/722?source=gh-node) (Virtual Currency, Digital Goods featuring recurring billing, and Virtual Cart).\n\nTo use Paymentwall, all you need to do is to sign up for a Paymentwall Merchant Account so you can setup an Application designed for your site.\nTo open your merchant account and set up an application, you can [sign up here](http://paymentwall.com/signup/merchant?source=gh-node).\n\n#Installation\nTo install the library in your environment, simply run the following command:\n\n```\nnpm install paymentwall\n```\n\nThen use a code sample below.\n\n#Code Samples\n\n##Digital Goods API\n\n[Web API details](http://www.paymentwall.com/en/documentation/Digital-Goods-API/710#paymentwall_widget_call_flexible_widget_call)\n\n####Initializing Paymentwall\n\n```javascript\nvar Paymentwall = require(\'paymentwall\');\nPaymentwall.configure(\n  Paymentwall.Base.API_GOODS,\n  \'YOUR_APPLICATION_KEY\',\n  \'YOUR_SECRET_KEY\'\n);\n```\n\n####Widget Call\n\nThe widget is a payment page hosted by Paymentwall that embeds the entire payment flow: selecting the payment method, completing the billing details, and providing customer support via the Help section. You can redirect the users to this page or embed it via iframe. The sample code below renders an iframe with Paymentwall Widget.\n\n```javascript\nvar widget = new Paymentwall.Widget(\n  \'user40012\',      // id of the end-user who\'s making the payment\n  \'p1\',             // widget code, e.g. p1; can be picked in the Widgets section of your merchant account \n  [                 // product details for Flexible Widget Call. \n                    // Leave empty if product selection happens on Paymentwall\'s side\n    new Paymentwall.Product(\n      \'product301\',                           // id of the product in your system  \n      9.99,                                   // price\n      \'USD\',                                  // currency code\n      \'Gold Membership\',                      // product name\n      Paymentwall.Product.TYPE_SUBSCRIPTION,   // this is a time-based product\n      1,                                      // duration is 1\n      Paymentwall.Product.PERIOD_TYPE_MONTH,   //              month\n      true                                    // this is a recurring product\n    )\n  ],\n  {\'email\': \'user@hostname.com\'}              // additional parameters. for full list check API docs\n);\nconsole.log(widget.getHtmlCode());\n```\n\n####Pingback Processing\n\nThe Pingback is a webhook notifying about a payment being made. Pingbacks are sent via HTTP/HTTPS to your servers. To process pingbacks use the following code:\n\n```javascript\nvar pingback = new Paymentwall.Pingback(queryData, ipAddress);\nif (pingback.validate()) {\n  var productId = pingback.getProduct().getId();\n  if (pingback.isDeliverable()) {\n    // deliver the product\n  } else if (pingback.isCancelable()) {\n    // withdraw the product\n  } \n  console.log(\'OK\'); // Paymentwall expects the string OK in response, otherwise the pingback will be resent\n} else {\n  console.log(pingback.getErrorSummary());\n}\n```\n\n## Virtual Currency API\n\n[Web API Details](https://www.paymentwall.com/en/documentation/Virtual-Currency-API/711)\n\n#### Initializing Paymentwall\n\n```javascript\nvar Paymentwall = require(\'paymentwall\');\n\nPaymentwall.configure(\n  Paymentwall.Base.API_VC,\n  \'YOUR_APPLICATION_KEY\',\n  \'YOUR_SECRET_KEY\'\n);\n```\n\n#### Widget Call\n\n```javascript\nvar widget = new Paymentwall.Widget(\n  \'user40012\',\n  \'p10\',\n  [],\n  {\'email\': \'user@hostname.com\'}\n);\nconsole.log(widget.getHtmlCode());\n```\n\n#### Pingback Processing\n\n```javascript\nvar pingback = new Paymentwall.Pingback(queryData, ipAddress);\n\nif (pingback.validate()) {\n  var virtualCurrency = pingback.getVirtualCurrencyAmount();\n  if (pingback.isDeliverable()) {\n    // deliver the virtual currency\n  } else if (pingback.isCancelable()) {\n    // withdraw the virtual currency\n  } \n  console.log(\'OK\'); // Paymentwall expects the string OK in response, otherwise the pingback will be resent\n} else {\n  console.log(pingback.getErrorSummary());\n}\n```\n\n## Cart API\n\n[Web API Details](https://www.paymentwall.com/en/documentation/Shopping-Cart-API/1098)\n\n#### Initializing Paymentwall\n\n```javascript\nvar Paymentwall = require(\'paymentwall\');\n\nPaymentwall.configure(\n  Paymentwall.Base.API_CART,\n  \'YOUR_APPLICATION_KEY\',\n  \'YOUR_SECRET_KEY\'\n);\n```\n\n#### Widget Call\n\n```javascript\nvar widget = new Paymentwall.Widget(\n  \'user40012\',\n  \'p10\',\n  [\n    new Paymentwall.Product(\'product301\', 3.33, \'EUR\'), // first product in cart\n    new Paymentwall.Product(\'product607\', 7.77, \'EUR\')  // second product in cart\n  ],\n  {\'email\': \'user@hostname.com\'}\n);\nconsole.log(widget.getHtmlCode());\n```\n\n#### Pingback Processing\n\n```javascript\nvar pingback = new Paymentwall.Pingback(queryData, ipAddress);\n\nif (pingback.validate()) {\n  var productId = pingback.getProduct().getId();\n  if (pingback.isDeliverable()) {\n    // deliver the product\n  } else if (pingback.isCancelable()) {\n    // withdraw the product\n  } \n  console.log(\'OK\'); // Paymentwall expects the string OK in response, otherwise the pingback will be resent\n} else {\n  console.log(pingback.getErrorSummary());\n}\n```\n##Brick API\n\n[Web API details](https://www.paymentwall.com/en/documentation/Brick/2968)\n\n####Initializing Paymentwall\n\n```javascript\nvar Paymentwall = require(\'paymentwall\');\nPaymentwall.configure(\n  Paymentwall.Base.API_GOODS,\n  \'YOUR_APPLICATION_KEY\',\n  \'YOUR_SECRET_KEY\'\n);\n```\n\n####Create a one-time token\n\n```javascript\nvar onetimetoken = new Paymentwall.Onetimetoken(\n4000000000000002,// Card number, digits only\n01,// Expiration month, 2 digits from 01 to 12\n2017,// Expiration year, 4 digits\n222// CVC/CVV, 3-4 digits\n);\n\nonetimetoken.createOnetimetoken(function(onetimetoken_response){\n// get the parameter in response\nconsole.log(\'onetimetoken=\'+onetimetoken_response.token);\n});\n```\n\n####Charge\n\n```javascript\nvar charge = new Paymentwall.Charge(\n0.5, //price\n\'USD\', //currency code\n\'description\', //description of the product\n\'useremail@example.com\', // user\'s email which can be gotten by req.body.email\n\'fingerprint\', // fingerprint which can be gotten by req.body.brick_fingerprint\n// if generated via backend please use this Charge in the callback function of createOnetimetoken\n//onetimetoken_response.token,\n// if generated via brick.js\nreq.body.brick_token, //one-time token\n{\'custom[User_prfile_API]\':\'Value\'} //custom parameters\n);\n\ncharge.createCharge(function(Charge_response){\n  console.log(\'response of Charge =\'+Charge_response);\n});\n```\n\n####Charge Details\n\n```javascript\n//get the charge details through chargeid\nvar charge = new Paymentwall.Charge();\n\ncharge.otherOperation(chargeid,\'detail\',function(data){\n  console.log(\'detail\'+data);\n});\n```\n\n####Charge-capture\n\n```javascript\n//capture a charge through chargeid\nvar charge = new Paymentwall.Charge();\n\ncharge.otherOperation(chargeid,\'capture\',function(data){\n  console.log(\'capture_data\'+data);\n});\n```\n\n####Charge-void\n\n```javascript\n//void a charge through chargeid\nvar charge = new Paymentwall.Charge();\n\ncharge.otherOperation(chargeid,\'void\',function(data){\n  console.log(\'void_data\'+data);\n});\n```\n\n####Charge-refund\n\n```javascript\n//refund a charge through chargeid\nvar charge = new Paymentwall.Charge();\n\ncharge.otherOperation(chargeid,\'refund\',function(data){\n  console.log(\'refund_data\'+data);\n});\n```\n\n####Subscription\n\n```javascript\n//create a subscription\nvar subscription = new Paymentwall.Subscription(\n0.5, //price\n\'USD\', //currency code\n\'description\', //description of the product\n\'useremail@example.com\', // user\'s email which can be gotten by req.body.email\n\'fingerprint\', // fingerprint which can be gotten by req.body.brick_fingerprint\n// if generated via backend please use this Charge in the callback function of createOnetimetoken\n//onetimetoken_response.token,\n// if generated via brick.js\nreq.body.brick_token, //one-time token\n\'day\', // day/week/month/year\n3, // duration\n{\n  \'trial[amount]\':0.5,\n  \'trial[currency]\':\'USD\',\n  \'trial[period]\':\'day\',\n  \'trial[period_duration]\':3\n}// parameters for trial period\n{\'custom[User_prfile_API]\':\'Value\'} //custom parameters, if there is a trail, plan is required\n);\n\nsubscription.createSubscription(function(subscription_response){\n  console.log(subscription_response);\n});\n\n```\n\n####Subscription-details\n\n```javascript\n//get the subscription details through subscriptionid\nvar subscription = new Paymentwall.Subscription();\n\nsubscription.otherOperation(subscriptionid,\'detail\',function(data){\n  console.log(\'subscription_data\'+data);\n});\n```\n\n####Subscription-cancel\n\n```javascript\n//cancel a subscription through subscriptionid\nvar subscription = new Paymentwall.Subscription();\n\nsubscription.otherOperation(subscriptionid,\'cancel\',function(data){\n  console.log(\'cancel_data\'+data);\n});\n```\n\n####Pingback Processing\n\nThe Pingback is a webhook notifying about a payment being made. Pingbacks are sent via HTTP/HTTPS to your servers. To process pingbacks use the following code:\n\n```javascript\nvar pingback = new Paymentwall.Pingback(queryData, ipAddress, true);\nif (pingback.validate()) {\n  var productId = pingback.getProduct().getId();\n  if (pingback.isDeliverable()) {\n    // deliver the product\n  } else if (pingback.isCancelable()) {\n    // withdraw the product\n  } \n  console.log(\'OK\'); // Paymentwall expects the string OK in response, otherwise the pingback will be resent\n} else {\n  console.log(pingback.getErrorSummary());\n}\n```',
17 silly publish   readmeFilename: 'README.md',
17 silly publish   gitHead: '332fd937626b233256710d0a89a8d62c9771b3b2',
17 silly publish   _id: 'paymentwall@1.1.0',
17 silly publish   _shasum: '3cb0d37e15b8d208d6ec673672ef3aaee861f21a',
17 silly publish   _from: '.' }
18 verbose getPublishConfig undefined
19 silly mapToRegistry name paymentwall
20 silly mapToRegistry using default registry
21 silly mapToRegistry registry https://registry.npmjs.org/
22 silly mapToRegistry uri https://registry.npmjs.org/paymentwall
23 verbose publish registryBase https://registry.npmjs.org/
24 silly publish uploading /Users/heitor/.npm/paymentwall/1.1.0/package.tgz
25 verbose stack Error: auth required for publishing
25 verbose stack     at CachingRegistryClient.publish (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/publish.js:30:14)
25 verbose stack     at /usr/local/lib/node_modules/npm/lib/publish.js:134:14
25 verbose stack     at mapToRegistry (/usr/local/lib/node_modules/npm/lib/utils/map-to-registry.js:55:3)
25 verbose stack     at publish_ (/usr/local/lib/node_modules/npm/lib/publish.js:104:3)
25 verbose stack     at Array.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/slide/lib/bind-actor.js:15:8)
25 verbose stack     at LOOP (/usr/local/lib/node_modules/npm/node_modules/slide/lib/chain.js:15:14)
25 verbose stack     at LOOP (/usr/local/lib/node_modules/npm/node_modules/slide/lib/chain.js:14:28)
25 verbose stack     at chain (/usr/local/lib/node_modules/npm/node_modules/slide/lib/chain.js:20:5)
25 verbose stack     at /usr/local/lib/node_modules/npm/lib/publish.js:73:5
25 verbose stack     at RES (/usr/local/lib/node_modules/npm/node_modules/inflight/inflight.js:23:14)
26 verbose cwd /Users/heitor/Projects/paymentwall-node
27 error Darwin 14.5.0
28 error argv "/usr/local/bin/node" "/usr/local/bin/npm" "publish"
29 error node v4.2.2
30 error npm  v2.14.7
31 error code ENEEDAUTH
32 error need auth auth required for publishing
32 error need auth You need to authorize this machine using `npm adduser`
33 verbose exit [ 1, true ]
